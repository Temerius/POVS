import serial
import sys
import threading
import time
import random
from datetime import datetime

class STM32TwoWayComm:
    def __init__(self, port, baudrate=115200):
        self.port = port
        self.baudrate = baudrate
        self.ser = None
        self.running = False
        self.rx_count = 0
        self.tx_count = 0
        
    def connect(self):
        try:
            self.ser = serial.Serial(
                port=self.port,
                baudrate=self.baudrate,
                bytesize=serial.EIGHTBITS,
                parity=serial.PARITY_NONE,
                stopbits=serial.STOPBITS_ONE,
                timeout=0.1
            )
            print(f"‚úì Connected to {self.port}")
            return True
        except serial.SerialException as e:
            print(f"‚ùå Error: {e}")
            return False
    
    def send_number(self, number):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —á–∏—Å–ª–æ –Ω–∞ STM32"""
        if self.ser and self.ser.is_open:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ ASCII —Å–∏–º–≤–æ–ª –¥–ª—è —á–∏—Å–µ–ª 0-9
            if 0 <= number <= 9:
                self.ser.write(chr(ord('0') + number).encode('utf-8'))
            # –î–ª—è —á–∏—Å–µ–ª 10-99 –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ –±–∞–π—Ç
            else:
                self.ser.write(bytes([number]))
            
            self.tx_count += 1
            timestamp = datetime.now().strftime("%H:%M:%S.%f")[:-3]
            print(f"[{timestamp}] TX #{self.tx_count}: Sent {number} to STM32")
    
    def receiver_thread(self):
        """–ü–æ—Ç–æ–∫ –¥–ª—è –ø—Ä–∏—ë–º–∞ –¥–∞–Ω–Ω—ã—Ö –æ—Ç STM32"""
        print("\nüì° RX Thread started\n")
        
        while self.running:
            try:
                if self.ser.in_waiting > 0:
                    data = self.ser.readline()
                    
                    try:
                        message = data.decode('utf-8', errors='ignore').strip()
                        
                        if message:
                            self.rx_count += 1
                            timestamp = datetime.now().strftime("%H:%M:%S.%f")[:-3]
                            print(f"[{timestamp}] RX #{self.rx_count}: {message}")
                            
                    except UnicodeDecodeError:
                        print(f"‚ö† Decode error: {data.hex()}")
                        
            except Exception as e:
                if self.running:
                    print(f"‚ùå RX Error: {e}")
                break
            
            #time.sleep(0.01)  # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
    
    def sender_thread(self):
        """–ü–æ—Ç–æ–∫ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–ª—É—á–∞–π–Ω—ã—Ö —á–∏—Å–µ–ª –Ω–∞ STM32"""
        print("üì§ TX Thread started\n")
        
        while self.running:
            try:
                # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ —á–∏—Å–ª–æ –æ—Ç 0 –¥–æ 99
                random_number = random.randint(0, 99)
                

                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ STM32
                self.send_number(random_number)
                
                # –ñ–¥—ë–º 3 —Å–µ–∫—É–Ω–¥—ã –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –æ—Ç–ø—Ä–∞–≤–∫–æ–π
                time.sleep(100)
                
            except Exception as e:
                if self.running:
                    print(f"‚ùå TX Error: {e}")
                break
    
    def run(self):
        """–ó–∞–ø—É—Å–∫ –¥–≤—É—Å—Ç–æ—Ä–æ–Ω–Ω–µ–π —Å–≤—è–∑–∏"""
        self.running = True
        
        # –°–æ–∑–¥–∞—ë–º –¥–≤–∞ –ø–æ—Ç–æ–∫–∞: –¥–ª—è –ø—Ä–∏—ë–º–∞ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏
        rx_thread = threading.Thread(target=self.receiver_thread, daemon=True)
        tx_thread = threading.Thread(target=self.sender_thread, daemon=True)
        
        rx_thread.start()
        tx_thread.start()
        
        try:
            # –ì–ª–∞–≤–Ω—ã–π –ø–æ—Ç–æ–∫ –æ–∂–∏–¥–∞–µ—Ç Ctrl+C
            while True:
                time.sleep(0.1)
                
        except KeyboardInterrupt:
            print("\n\n" + "=" * 60)
            print("üõë Stopping...")
            self.running = False
            
            # –ñ–¥—ë–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–æ—Ç–æ–∫–æ–≤
            rx_thread.join(timeout=1)
            tx_thread.join(timeout=1)
            
            print(f"üìä Statistics:")
            print(f"   RX: {self.rx_count} messages received")
            print(f"   TX: {self.tx_count} numbers sent")
            
            if self.ser:
                self.ser.close()
            
            print("‚úì Disconnected. Bye!")

def main():
    PORT = 'COM5'  # –ò–∑–º–µ–Ω–∏ –Ω–∞ —Å–≤–æ–π –ø–æ—Ä—Ç!
    
    print("=" * 60)
    print("STM32 Two-Way Communication Test")
    print("=" * 60)
    print(f"Port: {PORT}")
    print(f"Baudrate: 115200")
    print("\nMode:")
    print("  RX: Receiving messages from STM32")
    print("  TX: Sending random numbers (0-99) every 3 sec")
    print("\nPress Ctrl+C to exit")
    print("=" * 60)
    print()
    
    comm = STM32TwoWayComm(PORT)
    
    if comm.connect():
        time.sleep(1) 
        comm.run()
    else:
        print("\n–ü—Ä–æ–≤–µ—Ä—å:")
        print("1. –ü—Ä–∞–≤–∏–ª—å–Ω–æ –ª–∏ —É–∫–∞–∑–∞–Ω COM-–ø–æ—Ä—Ç")
        print("2. –ù–µ –∑–∞–Ω—è—Ç –ª–∏ –ø–æ—Ä—Ç –¥—Ä—É–≥–æ–π –ø—Ä–æ–≥—Ä–∞–º–º–æ–π")
        print("3. –ü–æ–¥–∫–ª—é—á–µ–Ω–∞ –ª–∏ –ø–ª–∞—Ç–∞ –∫ –∫–æ–º–ø—å—é—Ç–µ—Ä—É")
        sys.exit(1)

if __name__ == "__main__":
    main()